---
#
# Ansible playbook to prepare a Bitrise OS X VM/box, used through vagrant
#

- hosts: all
  # accelerate: true
  remote_user: vagrant
  vars:
    - ansible_sudo_pass: vagrant
    - param_user: vagrant
  tasks:
    #
    # Required param checks
    - fail: msg="bitrise_box_version not defined (format example 'r2p3')"
      when: bitrise_box_version|default("") == ""
    - debug: msg=" (i) bitrise_box_version = {{ bitrise_box_version }}"
    - debug: msg=" (!) Incremental Setup? {{ is_incremental_setup|default(false) }}"

    #
    # Setup the debug log file for custom scripts
    #  [!] Collect custom script outputs to ~/Desktop/debug.log on the remote host!
    # You can inspect it during setup with $ tail -f ~/Desktop/debug.log
    #  custom installer scripts (the ones in ./installers folder) use this debug log file
    - file: path=/Users/{{ param_user }}/Desktop/debug.log
        state=touch
        owner="{{ param_user }}"
        mode=0644

    #
    # Add user to sudoers-no-password
    - name: "Add user {{ param_user }} to sudoers with no password"
      sudo: yes
      lineinfile: "dest=/etc/sudoers
        regexp='^{{ param_user }} ALL'
        line='{{ param_user }} ALL=(ALL) NOPASSWD: ALL'
        state=present
        validate='visudo -cf %s'"

    #
    # Switch to Xcode stable, for brew-ing
    - shell: bash -l -c "sudo xcode-select --switch /Applications/Xcodes/Xcode-stable.app/Contents/Developer"

    #
    # SSH config
    - name: ensure .ssh folder is ok
      file: path=/Users/{{ param_user }}/.ssh
        state=directory
        owner="{{ param_user }}"
        mode=0700
    - name: copy ssh key to remote's {{ param_user }} user
      copy: src=setupfiles/authorized_keys
        dest="/Users/{{ param_user }}/.ssh/authorized_keys"
        owner="{{ param_user }}"
        mode=0600
    - name: sshd_config settings
      sudo: yes
      lineinfile: dest=/etc/sshd_config
        regexp="{{ item.regexp }}"
        line="{{ item.line }}"
        state="{{ item.state }}"
      with_items:
        # PasswordAuthentication no
        - { regexp: '^PasswordAuthentication yes', line: '', state: "absent" }
        - { regexp: '^PasswordAuthentication no', line: 'PasswordAuthentication no', state: "present" }
        # PermitEmptyPasswords no
        - { regexp: '^PermitEmptyPasswords yes', line: '', state: "absent" }
        - { regexp: '^PermitEmptyPasswords no', line: 'PermitEmptyPasswords no', state: "present" }
        # # LoginGraceTime 1m
        - { regexp: '^LoginGraceTime', line: 'LoginGraceTime 1m', state: "present" }
        # PermitRootLogin no
        - { regexp: '^PermitRootLogin yes', line: '', state: "absent" }
        - { regexp: '^PermitRootLogin no', line: 'PermitRootLogin no', state: "present" }
        # # LogLevel 1m
        - { regexp: '^LogLevel', line: 'LogLevel VERBOSE', state: "present" }
        # UsePAM no -> if this is not set to 'no' then password authentication still possible!
        - { regexp: '^UsePAM yes', line: '', state: "absent" }
        - { regexp: '^UsePAM no', line: 'UsePAM no', state: "present" }
        # ChallengeResponseAuthentication
        - { regexp: '^ChallengeResponseAuthentication yes', line: '', state: "absent" }
        - { regexp: '^ChallengeResponseAuthentication no', line: 'ChallengeResponseAuthentication no', state: "present" }
        # UseDNS no -> for better speed
        - { regexp: '^UseDNS yes', line: '', state: "absent" }
        - { regexp: '^UseDNS no', line: 'UseDNS no', state: "present" }
    - name: ssh connection config (user specific)
      copy: src=setupfiles/ssh-config
        dest="/Users/{{ param_user }}/.ssh/config"
        owner="{{ param_user }}"
        mode=0600

    #
    # Setup profiles
    - name: ensure .profiles folder is ok
      file: path=/Users/{{ param_user }}/.profiles
        state=directory
        owner="{{ param_user }}"
        mode=0700
    - name: setup steplib_profile
      copy: src=profiles/steplib_profile
        dest="/Users/{{ param_user }}/.profiles/steplib_profile"
        owner="{{ param_user }}"
        mode=0600
    - name: setup bitrise_profile
      copy: src=profiles/bitrise_profile
        dest="/Users/{{ param_user }}/.profiles/bitrise_profile"
        owner="{{ param_user }}"
        mode=0600
    - name: setup .bashrc
      copy: src=profiles/bashrc
        dest="/Users/{{ param_user }}/.bashrc"
        owner="{{ param_user }}"
        mode=0600
    - name: setup .profile
      copy: src=profiles/profile
        dest="/Users/{{ param_user }}/.profile"
        owner="{{ param_user }}"
        mode=0600
    - name: setup .bash_profile
      copy: src=profiles/bash_profile
        dest="/Users/{{ param_user }}/.bash_profile"
        owner="{{ param_user }}"
        mode=0600

    #
    # Install and update homebrew
    - name: run brew installer script
      script: installers/install_brew.sh creates=/usr/local/bin/brew
    - homebrew: update_homebrew=yes upgrade_all=no
    - name: check brew doctor
      shell: brew doctor
      when: is_incremental_setup|default(false) == false
    # brew some commands
    - homebrew: name=git state=present
    - homebrew: name=wget state=present
    - homebrew: name=mercurial state=present
    - homebrew: name=xctool state=present
    - homebrew: name=node state=present
    - homebrew: name=ansible state=present
    - homebrew: name=coreutils state=present
    ## Go
    # Gopath is $HOME/go
    - homebrew: name=go state=present
    - file: path="/Users/{{ param_user }}/go/{{ item.fold_path }}"
        state=directory
        owner="{{ param_user }}"
      with_items:
        - { fold_path: 'src' }
        - { fold_path: 'bin' }
        - { fold_path: 'pkg' }

    #
    # Install and setup RVM with Ruby
    - name: run RVM installer script
      script: installers/install_rvm.sh creates=/Users/{{ param_user }}/.rvm/bin/rvm
    # Pre-installed rubies
    - shell: bash -l -c "rvm install ruby-2.1.5 --disable-binary"
    - shell: bash -l -c "rvm install ruby-2.1.6 --disable-binary"
    - shell: bash -l -c "rvm install ruby-2.2.2 --disable-binary"
    # Default ruby version
    #  and pre-installed gems for this version
    - shell: bash -l -c "rvm use 2.1.5 --default"
    - shell: bash -l -c "gem install bundler"
      when: is_incremental_setup|default(false) == false
    - shell: bash -l -c "bundle --version"
    - command: rvm osx-ssl-certs update all
    - shell: bash -l -c "gem update"
      when: is_incremental_setup|default(false) == false
    # GEMs: Cocoapods
    - shell: bash -l -c "gem install cocoapods"
      when: is_incremental_setup|default(false) == false
    - shell: bash -l -c "pod setup"
      when: is_incremental_setup|default(false) == false
    # GEMs: Nomad-CLI
    - shell: bash -l -c "gem install nomad-cli"
      when: is_incremental_setup|default(false) == false

    #
    # Setup Bitrise specific folders
    #
    # Setup base logs and pids folders
    - file: path="/Users/{{ param_user }}/{{ item.fold_path }}"
        state=directory
        owner="{{ param_user }}"
      with_items:
        # BITRISE_SOURCE_DIR
        - { fold_path: 'git' }
        # BITRISE_STEP_DIR
        - { fold_path: 'stepdir' }
        # BITRISE_DEPLOY_DIR
        - { fold_path: 'deploy' }
        # BITRISE_LIBRARY_DIR
        - { fold_path: 'Library/MobileDevice/Provisioning Profiles' }
        # BITRISE_PROFILE_DIR
        - { fold_path: 'profiles' }
        # BITRISE_SYM_ROOT
        - { fold_path: 'build' }
        # BITRISE_OBJ_ROOT
        - { fold_path: 'bin' }
        # BITRISE_FOLDER_PATH
        - { fold_path: 'bitrise' }
        # BITRISE_STEP_DATA_FOLDER_PATH
        - { fold_path: 'bitrise/stepdata' }
        #
        - { fold_path: 'bitrise/tools' }
    #
    # Install cmd-bridge
    - synchronize: src=tools/cmd-bridge/ dest="/Users/{{ param_user }}/bitrise/tools/cmd-bridge/"
    - name: run cmd-bridge installer script
      script: installers/install_cmd-bridge.sh

    - name: setup Desktop/box-info.json
      template: src=setupfiles/box-info.json.template
        dest="/Users/{{ param_user }}/Desktop/box-info.json"
        owner="{{ param_user }}"
        mode=0600

    #
    # Prepare
    ## Bootstrap script
    - name: setup .bootstrap.sh
      copy: src=setupfiles/bootstrap.sh
        dest="/Users/{{ param_user }}/.bootstrap.sh"
        owner="{{ param_user }}"
        mode=0700
    ## step_agent
    - name: setup .step_agent
      copy: src=step-agent/_bin/step_agent_osx
        dest="/Users/{{ param_user }}/.step_agent"
        owner="{{ param_user }}"
        mode=0700
    ## git_clone script and ssh no-prompt script
    - name: setup ssh_no_prompt.sh
      copy: src=steps-git-clone/ssh_no_prompt.sh
        dest="/Users/{{ param_user }}/ssh_no_prompt.sh"
        owner="{{ param_user }}"
        mode=0700
    - name: setup git_clone.rb
      copy: src=steps-git-clone/git_clone.rb
        dest="/Users/{{ param_user }}/git_clone.rb"
        owner="{{ param_user }}"
        mode=0700

    #
    # Switch to Xcode stable, the default Xcode for building
    - shell: bash -l -c "sudo xcode-select --switch /Applications/Xcodes/Xcode-stable.app/Contents/Developer"

    #
    # Final debug prints
    - debug: msg="---> Finished with automatic stuff - but here's some things you have to do manually:"
    - debug: msg=" (!) After you finished with the preparations RESTART the machine!"
    - debug: msg=" (!) Don't forget to remove the VM snapshots before packaging!"
    - debug: msg="---> Finished"
